#!/bin/bash
# Client Migration Test Runner
# Runs all client migration tests and generates reports

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🧪 Client Migration Test Suite${NC}"
echo -e "${BLUE}=================================${NC}"
echo ""

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo -e "${RED}❌ Error: package.json not found. Run from tests/client-migration directory${NC}"
    exit 1
fi

# Install dependencies if needed
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}📦 Installing test dependencies...${NC}"
    npm install
    echo ""
fi

# Check if API server is running
API_URL=${API_BASE_URL:-"http://localhost:3002"}
echo -e "${BLUE}🔍 Checking API server availability...${NC}"

if curl -s "$API_URL/api/health" >/dev/null 2>&1; then
    echo -e "${GREEN}✅ API server is running at $API_URL${NC}"
else
    echo -e "${YELLOW}⚠️  API server may not be running at $API_URL${NC}"
    echo -e "${YELLOW}   Some tests may fail. Start the server with: pnpm run dev${NC}"
fi

echo ""

# Create reports directory
mkdir -p reports

# Run test suites
run_test_suite() {
    local test_file="$1"
    local test_name="$2"
    local report_file="reports/${test_file%.js}.log"

    echo -e "${BLUE}🔍 Running $test_name...${NC}"

    if node --test "$test_file" > "$report_file" 2>&1; then
        echo -e "${GREEN}✅ $test_name passed${NC}"
        return 0
    else
        echo -e "${RED}❌ $test_name failed${NC}"
        echo -e "${YELLOW}   Check report: $report_file${NC}"
        return 1
    fi
}

# Test suite execution
test_results=()

echo -e "${BLUE}Running individual test suites:${NC}"
echo ""

# Raycast Extension Tests
run_test_suite "raycast-migration-test.js" "Raycast Extension Migration"
test_results+=($?)

# MCP Server Tests
run_test_suite "mcp-migration-test.js" "MCP Server Migration"
test_results+=($?)

# API Compatibility Tests
run_test_suite "api-compatibility.js" "API Backwards Compatibility"
test_results+=($?)

# Complete Auth Flow Tests
run_test_suite "client-auth-flow.js" "Complete Authentication Flows"
test_results+=($?)

echo ""
echo -e "${BLUE}📊 Test Results Summary${NC}"
echo -e "${BLUE}========================${NC}"

# Calculate results
total_tests=${#test_results[@]}
passed_tests=0
failed_tests=0

for result in "${test_results[@]}"; do
    if [ "$result" -eq 0 ]; then
        ((passed_tests++))
    else
        ((failed_tests++))
    fi
done

echo "Total test suites: $total_tests"
echo -e "Passed: ${GREEN}$passed_tests${NC}"
echo -e "Failed: ${RED}$failed_tests${NC}"

# Generate combined report
echo ""
echo -e "${BLUE}📝 Generating test report...${NC}"

cat > reports/test-summary.md << EOF
# Client Migration Test Report

**Generated:** $(date)
**API URL:** $API_URL

## Summary

- **Total Test Suites:** $total_tests
- **Passed:** $passed_tests
- **Failed:** $failed_tests
- **Success Rate:** $(( passed_tests * 100 / total_tests ))%

## Test Suites

### 1. Raycast Extension Migration
- **Status:** $([ "${test_results[0]}" -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** [raycast-migration-test.log](./raycast-migration-test.log)

### 2. MCP Server Migration
- **Status:** $([ "${test_results[1]}" -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** [mcp-migration-test.log](./mcp-migration-test.log)

### 3. API Backwards Compatibility
- **Status:** $([ "${test_results[2]}" -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** [api-compatibility.log](./api-compatibility.log)

### 4. Complete Authentication Flows
- **Status:** $([ "${test_results[3]}" -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
- **Report:** [client-auth-flow.log](./client-auth-flow.log)

## Next Steps

$(if [ "$failed_tests" -gt 0 ]; then
    echo "### 🔧 Failures Detected"
    echo ""
    echo "1. Review failed test logs in the reports/ directory"
    echo "2. Check API server is running: \`pnpm run dev\`"
    echo "3. Verify environment configuration in .env"
    echo "4. Re-run specific failed tests: \`npm run test:<suite-name>\`"
else
    echo "### 🎉 All Tests Passed"
    echo ""
    echo "Client migration testing is complete and successful!"
    echo "The JWT authentication system is ready for client migrations."
fi)

---
*Generated by Client Migration Test Suite*
EOF

echo -e "${GREEN}✅ Test report generated: reports/test-summary.md${NC}"

# Exit with error if any tests failed
if [ "$failed_tests" -gt 0 ]; then
    echo ""
    echo -e "${RED}❌ Some tests failed. Check the reports for details.${NC}"
    exit 1
else
    echo ""
    echo -e "${GREEN}🎉 All client migration tests passed!${NC}"
    echo -e "${GREEN}The JWT authentication system is ready for client migrations.${NC}"
    exit 0
fi